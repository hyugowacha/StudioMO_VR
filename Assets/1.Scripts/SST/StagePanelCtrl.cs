using System.Collections;
using System.Collections.Generic;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

public class StagePanelCtrl : MonoBehaviour
{
    [SerializeField] StagePanelType stagePanelType;     // 타입에 따라 스테이지 버튼 생성 제한 두기 위함

    [SerializeField] Transform stageListPanel;          // 스테이지 버튼 프리팹 정렬 위한 패널

    [SerializeField] GameObject stageIconPrefab;        // 스테이지 버튼 프리팹

    [SerializeField] GameObject selectStagePanel;       // 뒤로 돌아갈 스테이지 선택 패널

    [SerializeField] StageInfoDataSet stageInfoDataSet; // 스테이지 데이터 스크립터블 오브젝트

    [SerializeField] Image infoImage;                   // 버튼 프리팹 클릭 시 띄워지는 해당 스테이지 이미지

    [SerializeField] StageInfoPanel infoPanel;          // 이 테마 전용 InfoPanel 연결

    [SerializeField] TextMeshProUGUI starText;          // 스타 텍스트

    private void OnEnable()
    {
        stageInfoDataSet.UpdateUnlockedStages();

        infoImage.gameObject.SetActive(false);
    }

    private void Start()
    {
        starText.text = UserGameData.totalStars.ToString();
        SetStageIcons();
    }

    // ▼ 스테이지 리스트 패널에 스테이지 버튼 프리팹 지정된 갯수 만큼 생성
    private void SetStageIcons()
    {
        foreach(Transform child in stageListPanel)
        {
            // ▼ 기존 자식 제거 ( 재로드 방지 )
            Destroy(child.gameObject);
        }

        int index = 0;

        foreach (var data in stageInfoDataSet.stageInfoList)
        {
            if (stagePanelType != data.stagePanelType) continue;

            GameObject icon = Instantiate(stageIconPrefab, stageListPanel);
            StageIconButton iconScript = icon.GetComponent<StageIconButton>();

            iconScript.Init(data, infoPanel);
            icon.SetActive(true);
            icon.SetActive(false);
            index++;
        }

        // 이 시점에 전체 스테이지 데이터를 넘겨야 정확한 별 갯수 계산 가능
        CalculateTotalStars(stageInfoDataSet.stageInfoList);
        starText.text = UserGameData.totalStars.ToString();

        ShowStageButtons();
    }

    // 시각화 별
    public void ShowStageButtons()
    {
        foreach (Transform icon in stageListPanel)
        {
            icon.gameObject.SetActive(true);
        }
    }

    // TotalStars확인
    public static void CalculateTotalStars(List<StageInfoData> allStageInfoDatas)
    {
        int total = 0;

        foreach (var data in allStageInfoDatas)
        {
            int score = data.bestScore;
            int clear = data.clearValue;
            int add = data.addValue;

            if (score < clear) continue;
            else if (score < clear + add) total += 1;
            else total += 2;
        }

        UserGameData.totalStars = total;
        UserGameData.UpdateStars(total);
    }


    // ▼ 스테이지 패널 나가기 버튼
    public void OnClickExit()
    {
        // ▼ 전 패널이었던, 스테이지 고르는 패널 활성화
        selectStagePanel.SetActive(true);
        this.gameObject.SetActive(false);
    }

    public void OnClickExitInfoPanel()
    {
        infoPanel.gameObject.SetActive(false);
    }
}
